// Generated by CoffeeScript 1.3.3
var attempts, board, c, current_letter, current_score, div, down, el, end, expand, formatTime, grid, hasPrefix, hasWord, inPath, isAdjacent, letter, makeSquare, ncols, neighbors, nrows, overletter, path, pointerPress, pointerRelease, prefixes, r, row, solve, weightWord, weights, wordmap, words, xhr, _fn, _i, _j, _len, _len1,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

grid = "SERS PATG LINE SERS".split(' ');

grid = 'GREP TNAL ESIT DRES'.split(' ');

grid = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = grid.length; _i < _len; _i++) {
    row = grid[_i];
    _results.push((function() {
      var _j, _len1, _results1;
      _results1 = [];
      for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
        el = row[_j];
        _results1.push(el === "Q" ? "QU" : el);
      }
      return _results1;
    })());
  }
  return _results;
})();

nrows = grid.length;

ncols = grid[0].length;

board = document.getElementById('board');

wordmap = {};

prefixes = {};

words = null;

xhr = new XMLHttpRequest();

xhr.open('get', 'dictionary.txt', true);

weights = {
  A: 1,
  B: 4,
  C: 4,
  D: 2,
  E: 1,
  F: 4,
  G: 3,
  H: 3,
  I: 1,
  J: 10,
  K: 5,
  L: 2,
  M: 4,
  N: 2,
  O: 1,
  P: 4,
  QU: 10,
  R: 1,
  S: 1,
  T: 1,
  U: 2,
  V: 5,
  W: 4,
  X: 8,
  Y: 3,
  Z: 10
};

xhr.onload = function() {
  var header, list, path, word;
  words = xhr.responseText.split('\n');
  header = words.splice(0, 1)[0];
  console.time("blah");
  wordmap = {};
  list = (function() {
    var _i, _len, _ref, _ref1, _results;
    _ref = solve();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], word = _ref1[0], path = _ref1[1];
      if (wordmap[word]) {
        wordmap[word].push(path);
      } else {
        wordmap[word] = [path];
      }
      _results.push(word);
    }
    return _results;
  })();
  return console.timeEnd("blah");
};

xhr.send(null);

down = false;

current_letter = null;

current_score = 0;

path = [];

attempts = [];

end = +(new Date) + 3 * 60 * 1000;

setInterval(function() {
  var time;
  time = formatTime(end - new Date);
  document.getElementById('timer').innerText = time;
  return document.getElementById('score').innerText = current_score;
}, 1000);

formatTime = function(msec) {
  var min, sec;
  sec = Math.floor(msec / 1000);
  min = Math.floor(sec / 60);
  return min + ":" + (sec % 60);
};

document.body.addEventListener("mousedown", function(e) {
  pointerPress();
  return e.preventDefault();
});

document.body.addEventListener("mousedown", function(e) {
  return e.preventDefault();
});

document.body.addEventListener("touchstart", function(e) {
  pointerPress();
  return e.preventDefault();
});

pointerPress = function() {
  down = true;
  document.getElementById('word').innerHTML = '';
  document.getElementById('word').className = '';
  if (current_letter) {
    overletter.apply(this, current_letter);
  }
  return current_letter = null;
};

document.body.addEventListener("touchend", function(e) {
  return pointerRelease();
});

document.body.addEventListener("mouseup", function(e) {
  return pointerRelease();
});

document.body.addEventListener("touchmove", function(e) {
  if (e && e.touches && e.touches[0]) {
    el = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY);
    if (el && (el.row != null) && (el.col != null)) {
      overletter(el.row, el.col, el);
    }
  }
  return e.preventDefault();
});

weightWord = function(word) {
  var letter, sum, _i, _len;
  sum = 0;
  for (_i = 0, _len = word.length; _i < _len; _i++) {
    letter = word[_i];
    sum += weights[letter];
  }
  return sum;
};

pointerRelease = function() {
  var word, x, y, _i, _len, _ref;
  down = false;
  _ref = document.querySelectorAll('.square');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    el = _ref[_i];
    el.className = 'square';
  }
  word = ((function() {
    var _j, _len1, _ref1, _results;
    _results = [];
    for (_j = 0, _len1 = path.length; _j < _len1; _j++) {
      _ref1 = path[_j], x = _ref1[0], y = _ref1[1];
      _results.push(grid[x][y]);
    }
    return _results;
  })()).join('');
  path = [];
  if (__indexOf.call(attempts, word) >= 0) {
    document.getElementById('word').className = 'old';
  } else if (hasWord(word)) {
    current_score += weightWord(word);
    document.getElementById('score').innerText = current_score;
    document.getElementById('word').className = 'good';
  } else {
    document.getElementById('word').className = 'bad';
  }
  attempts.push(word);
  return current_letter = null;
};

makeSquare = function(text) {
  var letter, u, weight;
  letter = document.createElement('div');
  letter.className = "square";
  letter.innerText = text.slice(0, 1);
  weight = document.createElement('div');
  weight.className = 'weight';
  weight.innerText = weights[text];
  letter.appendChild(weight);
  if (text === "QU") {
    u = document.createElement('span');
    u.innerText = 'u';
    u.style.fontSize = '20px';
    letter.appendChild(u);
  }
  return letter;
};

overletter = function(row, col, el) {
  var c, r, score, text, word;
  current_letter = [row, col, el];
  if (down) {
    if (!inPath([row, col], path) && (path.length === 0 || isAdjacent([row, col], path[path.length - 1])) && grid[row][col]) {
      path.push([row, col]);
      document.getElementById('word').innerHTML = '';
      text = document.createElement('div');
      text.className = 'word';
      word = ((function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = path.length; _i < _len; _i++) {
          _ref = path[_i], r = _ref[0], c = _ref[1];
          _results.push(grid[r][c]);
        }
        return _results;
      })()).join('');
      text.innerText = word;
      document.getElementById('word').appendChild(text);
      score = document.createElement('div');
      score.className = 'score';
      score.innerText = weightWord(word);
      document.getElementById('word').appendChild(score);
      return el.className = 'square hover';
    }
  }
};

inPath = function(needle, haystack) {
  var i, _i, _len;
  for (_i = 0, _len = haystack.length; _i < _len; _i++) {
    i = haystack[_i];
    if (i[0] === needle[0] && i[1] === needle[1]) {
      return true;
    }
  }
  return false;
};

isAdjacent = function(first, second) {
  return Math.abs(first[0] - second[0]) <= 1 && Math.abs(first[1] - second[1]) <= 1;
};

for (r = _i = 0, _len = grid.length; _i < _len; r = ++_i) {
  row = grid[r];
  div = document.createElement('div');
  board.appendChild(div);
  _fn = function(r, c, letter) {
    var square;
    square = makeSquare(letter);
    square.row = r;
    square.col = c;
    square.addEventListener("mouseover", function(e) {
      overletter(r, c, square);
      return e.preventDefault();
    });
    square.addEventListener("mousedown", function(e) {
      overletter(r, c, square);
      return e.preventDefault();
    });
    return div.appendChild(square);
  };
  for (c = _j = 0, _len1 = row.length; _j < _len1; c = ++_j) {
    letter = row[c];
    _fn(r, c, letter);
  }
}

neighbors = function(_arg) {
  var matches, nx, ny, x, y, _k, _l, _ref, _ref1, _ref2, _ref3;
  x = _arg[0], y = _arg[1];
  matches = [];
  for (nx = _k = _ref = Math.max(0, x - 1), _ref1 = Math.min(x + 2, ncols); _ref <= _ref1 ? _k < _ref1 : _k > _ref1; nx = _ref <= _ref1 ? ++_k : --_k) {
    for (ny = _l = _ref2 = Math.max(0, y - 1), _ref3 = Math.min(y + 2, nrows); _ref2 <= _ref3 ? _l < _ref3 : _l > _ref3; ny = _ref2 <= _ref3 ? ++_l : --_l) {
      matches.push([nx, ny]);
    }
  }
  return matches;
};

hasPrefix = function(prefix) {
  var max, mid, min;
  if (prefix.length === 1) {
    return true;
  }
  min = 0;
  max = words.length - 1;
  while (max - min > 1) {
    mid = Math.floor(min / 2 + max / 2);
    if (words[mid].slice(0, prefix.length) === prefix) {
      return true;
    }
    if (words[mid] < prefix) {
      min = mid;
    } else {
      max = mid;
    }
  }
  return false;
};

hasWord = function(word) {
  var max, mid, min;
  min = 0;
  max = words.length - 1;
  while (max - min > 1) {
    mid = Math.floor(min / 2 + max / 2);
    if (words[mid] === word) {
      return true;
    }
    if (words[mid] < word) {
      min = mid;
    } else {
      max = mid;
    }
  }
  return false;
};

expand = function(prefix, path) {
  var matches, nx, ny, path1, prefix1, result, _k, _l, _len2, _len3, _ref, _ref1, _ref2;
  matches = [];
  if (hasWord(prefix)) {
    matches.push([prefix, path]);
  }
  _ref = neighbors(path[path.length - 1]);
  for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
    _ref1 = _ref[_k], nx = _ref1[0], ny = _ref1[1];
    if (!inPath([nx, ny], path)) {
      prefix1 = prefix + grid[ny][nx];
      if (hasPrefix(prefix)) {
        path1 = path.concat([[nx, ny]]);
        _ref2 = expand(prefix1, path1);
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          result = _ref2[_l];
          matches.push(result);
        }
      }
    }
  }
  return matches;
};

solve = function() {
  var matches, result, _k, _l, _len2, _len3, _len4, _m, _ref;
  matches = [];
  for (r = _k = 0, _len2 = grid.length; _k < _len2; r = ++_k) {
    row = grid[r];
    for (c = _l = 0, _len3 = row.length; _l < _len3; c = ++_l) {
      letter = row[c];
      _ref = expand(letter, [[c, r]]);
      for (_m = 0, _len4 = _ref.length; _m < _len4; _m++) {
        result = _ref[_m];
        matches.push(result);
      }
    }
  }
  return matches;
};
